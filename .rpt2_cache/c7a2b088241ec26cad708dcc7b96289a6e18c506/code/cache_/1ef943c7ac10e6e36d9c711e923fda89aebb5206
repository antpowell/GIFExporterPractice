{"code":"var _this = this;\r\nimport * as tslib_1 from \"tslib\";\r\nimport { GIFExporter } from './ts/gif.exporter';\r\nvar Game = /** @class */ (function () {\r\n    function Game(canvasElement) {\r\n        this._canvas = document.getElementById(canvasElement);\r\n        this._engine = new BABYLON.Engine(this._canvas, true, {\r\n            preserveDrawingBuffer: true,\r\n        });\r\n        this._gifExporter = new GIFExporter(this._engine, {\r\n            delay: 60,\r\n            duration: 5000,\r\n        });\r\n    }\r\n    Game.prototype.createScene = function () {\r\n        // Create a basic BJS Scene object.\r\n        this._scene = new BABYLON.Scene(this._engine);\r\n        // Create a FreeCamera, and set its position to (x:0, y:5, z:-10).\r\n        this._camera = new BABYLON.FreeCamera('camera1', new BABYLON.Vector3(0, 5, -10), this._scene);\r\n        // Target the camera to scene origin.\r\n        this._camera.setTarget(BABYLON.Vector3.Zero());\r\n        // Attach the camera to the canvas.\r\n        this._camera.attachControl(this._canvas, false);\r\n        // Create a basic light, aiming 0,1,0 - meaning, to the sky.\r\n        this._light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0, 1, 0), this._scene);\r\n        // Create a built-in \"sphere\" shape; with 16 segments and diameter of 2.\r\n        var sphere = BABYLON.MeshBuilder.CreateSphere('sphere', {\r\n            segments: 16,\r\n            diameter: 2,\r\n        }, this._scene);\r\n        // Move the sphere upward 1/2 of its height.\r\n        sphere.position.y = 1;\r\n        // Create a built-in \"ground\" shape.\r\n        var ground = BABYLON.MeshBuilder.CreateGround('ground', {\r\n            width: 6,\r\n            height: 6,\r\n            subdivisions: 2,\r\n        }, this._scene);\r\n    };\r\n    Game.prototype.doRender = function () {\r\n        var _this = this;\r\n        // Run the render loop.\r\n        this._engine.runRenderLoop(function () {\r\n            _this._scene.render();\r\n        });\r\n        // The canvas/window resize event handler.\r\n        window.addEventListener('resize', function () {\r\n            _this._engine.resize();\r\n        });\r\n    };\r\n    Game.prototype.downloadGIF = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this._gifExporter.download()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        resolve();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    return Game;\r\n}());\r\nexport { Game };\r\nwindow.addEventListener('DOMContentLoaded', function () {\r\n    var recordBtn = document.getElementById('recordBtn');\r\n    var stopBtn = document.getElementById('recStopBtn');\r\n    // Setup GIF generator\r\n    // Create the game using the 'renderCanvas'.\r\n    var game = new Game('renderCanvas');\r\n    // Create the scene.\r\n    game.createScene();\r\n    // Start render loop.\r\n    game.doRender();\r\n    recordBtn.addEventListener('click', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    recordBtn.disabled = true;\r\n                    return [4 /*yield*/, game.downloadGIF()];\r\n                case 1:\r\n                    _a.sent();\r\n                    recordBtn.disabled = false;\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n});\r\n"}
