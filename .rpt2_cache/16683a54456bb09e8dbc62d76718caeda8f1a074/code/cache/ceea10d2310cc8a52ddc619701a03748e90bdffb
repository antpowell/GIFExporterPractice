{"code":"import * as tslib_1 from \"tslib\";\r\nvar ENV_WORKER;\r\nvar GIFExporter = /** @class */ (function () {\r\n    function GIFExporter(engine, options) {\r\n        this.worker = 'gif.creator.service.ts';\r\n        this._canvas = engine.getRenderingCanvas();\r\n        this._delay = options.delay;\r\n        this._duration = options.duration;\r\n    }\r\n    GIFExporter.prototype.start = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n            var intervalRef;\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                this.init();\r\n                console.log('record canvas');\r\n                intervalRef = setInterval(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                    var frame, newFrame, message;\r\n                    return tslib_1.__generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, this.getFrame()];\r\n                            case 1:\r\n                                frame = _a.sent();\r\n                                return [4 /*yield*/, this.flipAndRotate(new Uint8Array(frame))];\r\n                            case 2:\r\n                                newFrame = _a.sent();\r\n                                message = {\r\n                                    job: 'collectFrames',\r\n                                    params: {\r\n                                        frame: newFrame,\r\n                                    },\r\n                                };\r\n                                this._worker.postMessage(message, [message.params.frame]);\r\n                                return [2 /*return*/];\r\n                        }\r\n                    });\r\n                }); }, this._delay);\r\n                setTimeout(function () {\r\n                    clearInterval(intervalRef);\r\n                    var message = {\r\n                        job: 'createGIF',\r\n                        params: { width: _this._resizeCanvas.width, height: _this._resizeCanvas.height },\r\n                    };\r\n                    _this._worker.postMessage(message);\r\n                    _this._worker.onmessage = function (_a) {\r\n                        var data = _a.data;\r\n                        console.log('complete', data);\r\n                        resolve(data);\r\n                    };\r\n                }, this._duration);\r\n                return [2 /*return*/];\r\n            });\r\n        }); });\r\n    };\r\n    GIFExporter.prototype.stop = function () { };\r\n    GIFExporter.prototype.cancel = function () { };\r\n    GIFExporter.prototype.download = function (filename) {\r\n        var _this = this;\r\n        if (filename === void 0) { filename = 'canvasGIF.gif'; }\r\n        return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n            var gif, url, download;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.start()];\r\n                    case 1:\r\n                        gif = _a.sent();\r\n                        url = URL.createObjectURL(new Blob([new Uint8Array(gif)], {\r\n                            type: 'image/gif',\r\n                        }));\r\n                        download = document.getElementById('download');\r\n                        document.body.appendChild(download);\r\n                        download.target = '_blank';\r\n                        download.style.display = 'none';\r\n                        download.href = url;\r\n                        download.download = filename;\r\n                        download.click();\r\n                        download.remove();\r\n                        this._worker.terminate();\r\n                        resolve();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    GIFExporter.prototype.getFrame = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n            var gl, pixels;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                gl = this._canvas.getContext('webgl2') || this._canvas.getContext('webgl');\r\n                pixels = new Uint8Array(this._width * this._height * 4);\r\n                gl.readPixels(0, 0, this._width, this._height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n                resolve(pixels.buffer);\r\n                return [2 /*return*/];\r\n            });\r\n        }); });\r\n    };\r\n    GIFExporter.prototype.init = function () {\r\n        this._width = this._canvas.width;\r\n        this._height = this._canvas.height;\r\n        var url = URL.createObjectURL(new Blob([ENV_WORKER], { type: 'application/javascript' }));\r\n        this._worker = new Worker('./gif.creator.service.ts');\r\n        this.canvasSetup();\r\n    };\r\n    GIFExporter.prototype.canvasSetup = function () {\r\n        this._holdingCanvas = document.createElement('canvas');\r\n        this._holdingCanvas2D = this._holdingCanvas.getContext('2d');\r\n        this._holdingCanvas.width = this._width;\r\n        this._holdingCanvas.height = this._height;\r\n        this._resizeCanvas = document.createElement('canvas');\r\n        this._resizeCanvas2D = this._resizeCanvas.getContext('2d');\r\n    };\r\n    GIFExporter.prototype.flipAndRotate = function (frame) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var imageData = _this._holdingCanvas2D.createImageData(_this._width, _this._height);\r\n            imageData.data.set(frame);\r\n            _this._holdingCanvas2D.putImageData(imageData, 0, 0);\r\n            _this.resize(_this._resizeCanvas);\r\n            _this.flip(_this._resizeCanvas2D, _this._holdingCanvas, _this._resizeCanvas);\r\n            var data = _this._resizeCanvas2D.getImageData(0, 0, _this._resizeCanvas.width, _this._resizeCanvas.height).data;\r\n            resolve(data.buffer);\r\n        });\r\n    };\r\n    GIFExporter.prototype.resize = function (canvas) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, rejct) {\r\n            var baseSize = 256;\r\n            var imageAspectRatio = _this._width / _this._height;\r\n            if (imageAspectRatio < 1) {\r\n                canvas.width = baseSize * imageAspectRatio;\r\n                canvas.height = baseSize;\r\n            }\r\n            else if (imageAspectRatio > 1) {\r\n                canvas.width = baseSize;\r\n                canvas.height = baseSize / imageAspectRatio;\r\n            }\r\n            else {\r\n                canvas.width = baseSize;\r\n                canvas.height = baseSize;\r\n            }\r\n            canvas.width = Math.max(canvas.width, 1);\r\n            canvas.height = Math.max(canvas.height, 1);\r\n            resolve();\r\n        });\r\n    };\r\n    GIFExporter.prototype.flip = function (resizeContext, holdingCanvas, resizeCanvas) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            // Scale and draw to flip Y to reorient readPixels.\r\n            resizeContext.globalCompositeOperation = 'copy';\r\n            resizeContext.scale(1, -1); // Y flip\r\n            resizeContext.translate(0, -resizeCanvas.height); // so we can draw at 0,0\r\n            resizeContext.drawImage(holdingCanvas, 0, 0, _this._width, _this._height, 0, 0, resizeCanvas.width, resizeCanvas.height);\r\n            resizeContext.setTransform(1, 0, 0, 1, 0, 0);\r\n            resizeContext.globalCompositeOperation = 'source-over';\r\n        });\r\n    };\r\n    return GIFExporter;\r\n}());\r\nexport { GIFExporter };\r\n"}
