{"code":"var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar _this = this;\r\nvar ENV_WORKER;\r\nvar GIFExporter = function (engine, options) {\r\n    console.log('inside GIF Exporter');\r\n    var _canvas;\r\n    var _delay;\r\n    var _duration;\r\n    var _width;\r\n    var _height;\r\n    var _worker;\r\n    var _holdingCanvas;\r\n    var _holdingCanvas2D;\r\n    var _resizeCanvas;\r\n    var _resizeCanvas2D;\r\n    var worker = 'gif.creator.service.ts';\r\n    var canvasSetup = function () {\r\n        _holdingCanvas = document.createElement('canvas');\r\n        _holdingCanvas2D = _holdingCanvas.getContext('2d');\r\n        _holdingCanvas.width = _width;\r\n        _holdingCanvas.height = _height;\r\n        _resizeCanvas = document.createElement('canvas');\r\n        _resizeCanvas2D = _resizeCanvas.getContext('2d');\r\n    };\r\n    canvasSetup();\r\n    var init = function () {\r\n        _width = _canvas.width;\r\n        _height = _canvas.height;\r\n        var url = URL.createObjectURL(new Blob([ENV_WORKER], { type: 'application/javascript' }));\r\n        _worker = new Worker('./gif.creator.service.ts');\r\n        canvasSetup();\r\n    };\r\n    var start = function () {\r\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\r\n            var intervalRef;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                init();\r\n                console.log('record canvas');\r\n                intervalRef = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {\r\n                    var frame, newFrame, message;\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, getFrame()];\r\n                            case 1:\r\n                                frame = _a.sent();\r\n                                return [4 /*yield*/, flipAndRotate(new Uint8Array(frame))];\r\n                            case 2:\r\n                                newFrame = _a.sent();\r\n                                message = {\r\n                                    job: 'collectFrames',\r\n                                    params: {\r\n                                        frame: newFrame,\r\n                                    },\r\n                                };\r\n                                _worker.postMessage(message, [message.params.frame]);\r\n                                return [2 /*return*/];\r\n                        }\r\n                    });\r\n                }); }, _delay);\r\n                setTimeout(function () {\r\n                    clearInterval(intervalRef);\r\n                    var message = {\r\n                        job: 'createGIF',\r\n                        params: { width: _resizeCanvas.width, height: _resizeCanvas.height },\r\n                    };\r\n                    _worker.postMessage(message);\r\n                    _worker.onmessage = function (_a) {\r\n                        var data = _a.data;\r\n                        console.log('complete', data);\r\n                        resolve(data);\r\n                    };\r\n                }, _duration);\r\n                return [2 /*return*/];\r\n            });\r\n        }); });\r\n    };\r\n    var stop = function () { };\r\n    var cancel = function () { };\r\n    var download = function (filename) {\r\n        if (filename === void 0) { filename = 'canvasGIF.gif'; }\r\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\r\n            var gif, url, download;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, start()];\r\n                    case 1:\r\n                        gif = _a.sent();\r\n                        url = URL.createObjectURL(new Blob([new Uint8Array(gif)], {\r\n                            type: 'image/gif',\r\n                        }));\r\n                        download = document.getElementById('download');\r\n                        document.body.appendChild(download);\r\n                        download.target = '_blank';\r\n                        download.style.display = 'none';\r\n                        download.href = url;\r\n                        download.download = filename;\r\n                        download.click();\r\n                        download.remove();\r\n                        _worker.terminate();\r\n                        resolve();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    var getFrame = function () {\r\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\r\n            var gl, pixels;\r\n            return __generator(this, function (_a) {\r\n                gl = _canvas.getContext('webgl2') || _canvas.getContext('webgl');\r\n                pixels = new Uint8Array(_width * _height * 4);\r\n                gl.readPixels(0, 0, _width, _height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n                resolve(pixels.buffer);\r\n                return [2 /*return*/];\r\n            });\r\n        }); });\r\n    };\r\n    var flipAndRotate = function (frame) {\r\n        return new Promise(function (resolve, reject) {\r\n            var imageData = _holdingCanvas2D.createImageData(_width, _height);\r\n            imageData.data.set(frame);\r\n            _holdingCanvas2D.putImageData(imageData, 0, 0);\r\n            resize(_resizeCanvas);\r\n            flip(_resizeCanvas2D, _holdingCanvas, _resizeCanvas);\r\n            var data = _resizeCanvas2D.getImageData(0, 0, _resizeCanvas.width, _resizeCanvas.height).data;\r\n            resolve(data.buffer);\r\n        });\r\n    };\r\n    var resize = function (canvas) {\r\n        return new Promise(function (resolve, rejct) {\r\n            var baseSize = 256;\r\n            var imageAspectRatio = _width / _height;\r\n            if (imageAspectRatio < 1) {\r\n                canvas.width = baseSize * imageAspectRatio;\r\n                canvas.height = baseSize;\r\n            }\r\n            else if (imageAspectRatio > 1) {\r\n                canvas.width = baseSize;\r\n                canvas.height = baseSize / imageAspectRatio;\r\n            }\r\n            else {\r\n                canvas.width = baseSize;\r\n                canvas.height = baseSize;\r\n            }\r\n            canvas.width = Math.max(canvas.width, 1);\r\n            canvas.height = Math.max(canvas.height, 1);\r\n            resolve();\r\n        });\r\n    };\r\n    var flip = function (resizeContext, holdingCanvas, resizeCanvas) {\r\n        return new Promise(function (resolve, reject) {\r\n            // Scale and draw to flip Y to reorient readPixels.\r\n            resizeContext.globalCompositeOperation = 'copy';\r\n            resizeContext.scale(1, -1); // Y flip\r\n            resizeContext.translate(0, -resizeCanvas.height); // so we can draw at 0,0\r\n            resizeContext.drawImage(holdingCanvas, 0, 0, _width, _height, 0, 0, resizeCanvas.width, resizeCanvas.height);\r\n            resizeContext.setTransform(1, 0, 0, 1, 0, 0);\r\n            resizeContext.globalCompositeOperation = 'source-over';\r\n        });\r\n    };\r\n};\r\n"}
