{"version":3,"sources":["node_modules\\process\\browser.js","src\\gif.creator.service.ts"],"names":["process","module","exports","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","Error","defaultClearTimeout","setTimeout","e","clearTimeout","runTimeout","fun","call","runClearTimeout","marker","queue","draining","currentQueue","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","nextTick","args","Array","arguments","i","push","Item","array","prototype","apply","title","browser","env","argv","version","versions","noop","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask"],"mappings":"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","file":"gif.creator.service.e5173224.map","sourceRoot":"..","sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/* ----------------------------------------------NeuQuant START---------------------------------------------------------- */\n/** NeuQuant Neural-Net Quantization Algorithm\n * ------------------------------------------\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n * See \"Kohonen neural networks for optimal colour quantization\"\n * in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n * for a discussion of the algorithm.\n * See also  http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal\n * in this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons who receive\n * copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n *\n * (JavaScript port 2012 by Johan Nordberg)\n * @author Anthony Powell (Typescript 2018)\n */\n\nexport class NeuQuant {\n\tprivate readonly ncycles = 100; // number of learning cycles\n\tprivate readonly netsize = 256; // number of colors used\n\tprivate readonly maxnetpos = this.netsize - 1;\n\n\t// defs for freq and bias\n\tprivate readonly netbiasshift = 4; // bias for colour values\n\tprivate readonly intbiasshift = 16; // bias for fractions\n\tprivate readonly intbias = 1 << this.intbiasshift;\n\tprivate readonly gammashift = 10;\n\tprivate readonly gamma = 1 << this.gammashift;\n\tprivate readonly betashift = 10;\n\tprivate readonly beta = this.intbias >> this.betashift; /* beta = 1/1024 */\n\tprivate readonly betagamma = this.intbias << (this.gammashift - this.betashift);\n\n\t// defs for decreasing radius factor\n\tprivate readonly initrad = this.netsize >> 3; // for 256 cols, radius starts\n\tprivate readonly radiusbiasshift = 6; // at 32.0 biased by 6 bits\n\tprivate readonly radiusbias = 1 << this.radiusbiasshift;\n\tprivate readonly initradius = this.initrad * this.radiusbias; //and decreases by a\n\tprivate readonly radiusdec = 30; // factor of 1/30 each cycle\n\n\t// defs for decreasing alpha factor\n\tprivate readonly alphabiasshift = 10; // alpha starts at 1.0\n\tprivate readonly initalpha = 1 << this.alphabiasshift;\n\tprivate readonly alphadec; // biased by 10 bits\n\n\t/* radbias and alpharadbias used for radpower calculation */\n\tprivate readonly radbiasshift = 8;\n\tprivate readonly radbias = 1 << this.radbiasshift;\n\tprivate readonly alpharadbshift = this.alphabiasshift + this.radbiasshift;\n\tprivate readonly alpharadbias = 1 << this.alpharadbshift;\n\n\t// four primes near 500 - assume no image has a length so large that it is\n\t// divisible by all four primes\n\tprivate readonly prime1 = 499;\n\tprivate readonly prime2 = 491;\n\tprivate readonly prime3 = 487;\n\tprivate readonly prime4 = 503;\n\tprivate readonly minpicturebytes = 3 * this.prime4;\n\n\tprivate network: number[][] = []; // int[netsize][4]\n\tprivate netindex: number[] = []; // for network lookup - really 256\n\n\t// bias and freq arrays for learning\n\tprivate bias: number[] = [];\n\tprivate freq: number[] = [];\n\tprivate radpower: number[] = [];\n\tprivate pixels: Uint8Array;\n\tprivate samplefac: number;\n\n\t/**\n\t * Constructor: init\n\t * sets up arrays\n\t */\n\tconstructor(pixels: Uint8Array, samplefac: number) {\n\t\tlet v: number;\n\t\tthis.pixels = pixels;\n\t\tthis.samplefac = samplefac;\n\t\tfor (let i = 0; i < this.netsize; i++) {\n\t\t\tv = (i << (this.netbiasshift + 8)) / this.netsize;\n\t\t\tthis.network[i] = [v, v, v];\n\t\t\tthis.freq[i] = this.intbias / this.netsize;\n\t\t\tthis.bias[i] = 0;\n\t\t}\n\t}\n\n\tprivate toInt(v) {\n\t\treturn ~~v;\n\t}\n\n\tprivate unbiasnet() {\n\t\tfor (let i = 0; i < this.netsize; i++) {\n\t\t\tthis.network[i][0] >>= this.netbiasshift;\n\t\t\tthis.network[i][1] >>= this.netbiasshift;\n\t\t\tthis.network[i][2] >>= this.netbiasshift;\n\t\t\tthis.network[i][3] = i; // record color number\n\t\t}\n\t}\n\n\tprivate altersingle(alpha, i, b, g, r) {\n\t\tthis.network[i][0] -= (alpha * (this.network[i][0] - b)) / this.initalpha;\n\t\tthis.network[i][1] -= (alpha * (this.network[i][1] - g)) / this.initalpha;\n\t\tthis.network[i][2] -= (alpha * (this.network[i][2] - r)) / this.initalpha;\n\t}\n\n\tprivate alterneigh(radius, i, b, g, r) {\n\t\tlet lo = Math.abs(i - radius);\n\t\tlet hi = Math.min(i + radius, this.netsize);\n\n\t\tlet j = i + 1;\n\t\tlet k = i - 1;\n\t\tlet m = 1;\n\n\t\tlet p, a;\n\t\twhile (j < hi || k > lo) {\n\t\t\ta = this.radpower[m++];\n\n\t\t\tif (j < hi) {\n\t\t\t\tp = this.network[j++];\n\t\t\t\tp[0] -= (a * (p[0] - b)) / this.alpharadbias;\n\t\t\t\tp[1] -= (a * (p[1] - g)) / this.alpharadbias;\n\t\t\t\tp[2] -= (a * (p[2] - r)) / this.alpharadbias;\n\t\t\t}\n\n\t\t\tif (k > lo) {\n\t\t\t\tp = this.network[k--];\n\t\t\t\tp[0] -= (a * (p[0] - b)) / this.alpharadbias;\n\t\t\t\tp[1] -= (a * (p[1] - g)) / this.alpharadbias;\n\t\t\t\tp[2] -= (a * (p[2] - r)) / this.alpharadbias;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate contest(b, g, r) {\n\t\t/*\n        finds closest neuron (min dist) and updates freq\n        finds best neuron (min dist-bias) and returns position\n        for frequently chosen neurons, freq[i] is high and bias[i] is negative\n        bias[i] = gamma * ((1 / netsize) - freq[i])\n      */\n\n\t\tlet bestd = ~(1 << 31);\n\t\tlet bestbiasd = bestd;\n\t\tlet bestpos = -1;\n\t\tlet bestbiaspos = bestpos;\n\n\t\tlet i, n, dist, biasdist, betafreq;\n\t\tfor (i = 0; i < this.netsize; i++) {\n\t\t\tn = this.network[i];\n\n\t\t\tdist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);\n\t\t\tif (dist < bestd) {\n\t\t\t\tbestd = dist;\n\t\t\t\tbestpos = i;\n\t\t\t}\n\n\t\t\tbiasdist = dist - (this.bias[i] >> (this.intbiasshift - this.netbiasshift));\n\t\t\tif (biasdist < bestbiasd) {\n\t\t\t\tbestbiasd = biasdist;\n\t\t\t\tbestbiaspos = i;\n\t\t\t}\n\n\t\t\tbetafreq = this.freq[i] >> this.betashift;\n\t\t\tthis.freq[i] -= betafreq;\n\t\t\tthis.bias[i] += betafreq << this.gammashift;\n\t\t}\n\n\t\tthis.freq[bestpos] += this.beta;\n\t\tthis.bias[bestpos] -= this.betagamma;\n\n\t\treturn bestbiaspos;\n\t}\n\n\tprivate inxbuild() {\n\t\tlet i,\n\t\t\tj,\n\t\t\tp,\n\t\t\tq,\n\t\t\tsmallpos,\n\t\t\tsmallval,\n\t\t\tpreviouscol = 0,\n\t\t\tstartpos = 0;\n\t\tfor (i = 0; i < this.netsize; i++) {\n\t\t\tp = this.network[i];\n\t\t\tsmallpos = i;\n\t\t\tsmallval = p[1]; // index on g\n\t\t\t// find smallest in i..netsize-1\n\t\t\tfor (j = i + 1; j < this.netsize; j++) {\n\t\t\t\tq = this.network[j];\n\t\t\t\tif (q[1] < smallval) {\n\t\t\t\t\t// index on g\n\t\t\t\t\tsmallpos = j;\n\t\t\t\t\tsmallval = q[1]; // index on g\n\t\t\t\t}\n\t\t\t}\n\t\t\tq = this.network[smallpos];\n\t\t\t// swap p (i) and q (smallpos) entries\n\t\t\tif (i != smallpos) {\n\t\t\t\tj = q[0];\n\t\t\t\tq[0] = p[0];\n\t\t\t\tp[0] = j;\n\t\t\t\tj = q[1];\n\t\t\t\tq[1] = p[1];\n\t\t\t\tp[1] = j;\n\t\t\t\tj = q[2];\n\t\t\t\tq[2] = p[2];\n\t\t\t\tp[2] = j;\n\t\t\t\tj = q[3];\n\t\t\t\tq[3] = p[3];\n\t\t\t\tp[3] = j;\n\t\t\t}\n\t\t\t// smallval entry is now in position i\n\n\t\t\tif (smallval != previouscol) {\n\t\t\t\tthis.netindex[previouscol] = (startpos + i) >> 1;\n\t\t\t\tfor (j = previouscol + 1; j < smallval; j++) this.netindex[j] = i;\n\t\t\t\tpreviouscol = smallval;\n\t\t\t\tstartpos = i;\n\t\t\t}\n\t\t}\n\t\tthis.netindex[previouscol] = (startpos + this.maxnetpos) >> 1;\n\t\tfor (j = previouscol + 1; j < 256; j++) this.netindex[j] = this.maxnetpos; // really 256\n\t}\n\n\tpublic lookupRGB(b, g, r) {\n\t\tlet a, p, dist;\n\n\t\tlet bestd = 1000; // biggest possible dist is 256*3\n\t\tlet best = -1;\n\n\t\tlet i = this.netindex[g]; // index on g\n\t\tlet j = i - 1; // start at netindex[g] and work outwards\n\n\t\twhile (i < this.netsize || j >= 0) {\n\t\t\tif (i < this.netsize) {\n\t\t\t\tp = this.network[i];\n\t\t\t\tdist = p[1] - g; // inx key\n\t\t\t\tif (dist >= bestd) i = this.netsize;\n\t\t\t\t// stop iter\n\t\t\t\telse {\n\t\t\t\t\ti++;\n\t\t\t\t\tif (dist < 0) dist = -dist;\n\t\t\t\t\ta = p[0] - b;\n\t\t\t\t\tif (a < 0) a = -a;\n\t\t\t\t\tdist += a;\n\t\t\t\t\tif (dist < bestd) {\n\t\t\t\t\t\ta = p[2] - r;\n\t\t\t\t\t\tif (a < 0) a = -a;\n\t\t\t\t\t\tdist += a;\n\t\t\t\t\t\tif (dist < bestd) {\n\t\t\t\t\t\t\tbestd = dist;\n\t\t\t\t\t\t\tbest = p[3];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j >= 0) {\n\t\t\t\tp = this.network[j];\n\t\t\t\tdist = g - p[1]; // inx key - reverse dif\n\t\t\t\tif (dist >= bestd) j = -1;\n\t\t\t\t// stop iter\n\t\t\t\telse {\n\t\t\t\t\tj--;\n\t\t\t\t\tif (dist < 0) dist = -dist;\n\t\t\t\t\ta = p[0] - b;\n\t\t\t\t\tif (a < 0) a = -a;\n\t\t\t\t\tdist += a;\n\t\t\t\t\tif (dist < bestd) {\n\t\t\t\t\t\ta = p[2] - r;\n\t\t\t\t\t\tif (a < 0) a = -a;\n\t\t\t\t\t\tdist += a;\n\t\t\t\t\t\tif (dist < bestd) {\n\t\t\t\t\t\t\tbestd = dist;\n\t\t\t\t\t\t\tbest = p[3];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn best;\n\t}\n\n\tprivate learn() {\n\t\tlet i;\n\n\t\tlet lengthcount = this.pixels.length;\n\t\tlet alphadec = this.toInt(30 + (this.samplefac - 1) / 3);\n\t\tlet samplepixels = this.toInt(lengthcount / (3 * this.samplefac));\n\t\tlet delta = this.toInt(samplepixels / this.ncycles);\n\t\tlet alpha = this.initalpha;\n\t\tlet radius = this.initradius;\n\n\t\tlet rad = radius >> this.radiusbiasshift;\n\n\t\tif (rad <= 1) rad = 0;\n\t\tfor (i = 0; i < rad; i++) this.radpower[i] = this.toInt(alpha * (((rad * rad - i * i) * this.radbias) / (rad * rad)));\n\n\t\tlet step;\n\t\tif (lengthcount < this.minpicturebytes) {\n\t\t\tthis.samplefac = 1;\n\t\t\tstep = 3;\n\t\t} else if (lengthcount % this.prime1 !== 0) {\n\t\t\tstep = 3 * this.prime1;\n\t\t} else if (lengthcount % this.prime2 !== 0) {\n\t\t\tstep = 3 * this.prime2;\n\t\t} else if (lengthcount % this.prime3 !== 0) {\n\t\t\tstep = 3 * this.prime3;\n\t\t} else {\n\t\t\tstep = 3 * this.prime4;\n\t\t}\n\n\t\tlet b, g, r, j;\n\t\tlet pix = 0; // current pixel\n\n\t\ti = 0;\n\t\twhile (i < samplepixels) {\n\t\t\tb = (this.pixels[pix] & 0xff) << this.netbiasshift;\n\t\t\tg = (this.pixels[pix + 1] & 0xff) << this.netbiasshift;\n\t\t\tr = (this.pixels[pix + 2] & 0xff) << this.netbiasshift;\n\n\t\t\tj = this.contest(b, g, r);\n\n\t\t\tthis.altersingle(alpha, j, b, g, r);\n\t\t\tif (rad !== 0) this.alterneigh(rad, j, b, g, r); // alter neighbours\n\n\t\t\tpix += step;\n\t\t\tif (pix >= lengthcount) pix -= lengthcount;\n\n\t\t\ti++;\n\n\t\t\tif (delta === 0) delta = 1;\n\t\t\tif (i % delta === 0) {\n\t\t\t\talpha -= alpha / alphadec;\n\t\t\t\tradius -= radius / this.radiusdec;\n\t\t\t\trad = radius >> this.radiusbiasshift;\n\n\t\t\t\tif (rad <= 1) rad = 0;\n\t\t\t\tfor (j = 0; j < rad; j++) this.radpower[j] = this.toInt(alpha * (((rad * rad - j * j) * this.radbias) / (rad * rad)));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic buildColormap() {\n\t\tthis.learn();\n\t\tthis.unbiasnet();\n\t\tthis.inxbuild();\n\t}\n\n\tpublic getColormap() {\n\t\tvar map = [];\n\t\tvar index = [];\n\n\t\tfor (var i = 0; i < this.netsize; i++) index[this.network[i][3]] = i;\n\n\t\tvar k = 0;\n\t\tfor (var l = 0; l < this.netsize; l++) {\n\t\t\tvar j = index[l];\n\t\t\tmap[k++] = this.network[j][0];\n\t\t\tmap[k++] = this.network[j][1];\n\t\t\tmap[k++] = this.network[j][2];\n\t\t}\n\t\treturn map;\n\t}\n}\n\n/* ----------------------------------------------NeuQuant END---------------------------------------------------------- */\n\n/* ----------------------------------------------ColorTableGen START---------------------------------------------------------- */\n\nexport class ColorTableGenerator {\n\tprivate _colorTable: number[] = [];\n\tprivate _GCT: string[] = [];\n\tprivate _neuQuant: NeuQuant;\n\tprivate _distribution = 51;\n\tprivate _colorLookup: {\n\t\t[index: string]: number;\n\t} = {};\n\n\tconstructor(frame: Uint8Array) {\n\t\tthis._neuQuant = new NeuQuant(frame, 20);\n\t\tthis._neuQuant.buildColormap();\n\t\tthis._colorTable = this._neuQuant.getColormap();\n\t}\n\n\tpublic generate(): [{ [index: string]: number }, string[]] {\n\t\tlet pixel: string = '';\n\t\tlet count = 0;\n\t\tthis._colorTable.forEach((value, index, array) => {\n\t\t\tpixel += this.pad(value);\n\t\t\tif ((index + 1) % 3 === 0) {\n\t\t\t\tthis._GCT.push(pixel);\n\t\t\t\tthis._colorLookup[pixel] = count;\n\t\t\t\tcount++;\n\t\t\t\tpixel = '';\n\t\t\t}\n\t\t\tif (index === this._colorTable.length - 1) return [this._colorLookup, this._GCT];\n\t\t});\n\t\treturn [this._colorLookup, this._GCT];\n\t}\n\n\tpublic lookupRGB(pixel: string): number {\n\t\tconst R = parseInt(pixel.substr(0, 2), 16);\n\t\tconst G = parseInt(pixel.substr(2, 2), 16);\n\t\tconst B = parseInt(pixel.substr(4, 2), 16);\n\t\tconst pixelIndex = this._neuQuant.lookupRGB(R, G, B);\n\n\t\treturn pixelIndex as number;\n\t}\n\n\tprivate pad(color: number): string {\n\t\tif (color < 16) {\n\t\t\treturn `0${color.toString(16)}`;\n\t\t} else {\n\t\t\treturn color.toString(16);\n\t\t}\n\t}\n}\n\n/* ----------------------------------------------ColorTableGen END---------------------------------------------------------- */\n\n/* ----------------------------------------------EncodedImage START---------------------------------------------------------- */\n\nexport class EncodedImage {\n\tdata: number[] = [];\n\n\tconstructor() {}\n\n\tpublic get(): number[] {\n\t\treturn this.data;\n\t}\n\n\tpublic write(byte: number): void {\n\t\tthis.data.push(byte);\n\t}\n\n\tpublic writeArray(array: number[], arraySize: number): void {\n\t\tfor (let i = 0; i < arraySize; i++) {\n\t\t\tthis.write(array[i]);\n\t\t}\n\t}\n\n\tpublic writeUTF(UTF: string): void {\n\t\tfor (let i = 0; i < UTF.length; i++) {\n\t\t\tthis.write(UTF.charCodeAt(i));\n\t\t}\n\t}\n\n\tpublic writeColor(color: string): void {\n\t\tfor (let i = 0; i < color.length; i += 2) {\n\t\t\tconst intValue: number = parseInt(color[i] + color[i + 1], 16);\n\t\t\tthis.write(intValue);\n\t\t}\n\t}\n\n\tpublic writeLittleEndian(num: number): void {\n\t\tthis.write(num & 0xff);\n\t\tthis.write((num >> 8) & 0xff);\n\t}\n\n\tpublic reset() {\n\t\tthis.data = [];\n\t}\n}\n\n/* ----------------------------------------------EncodedImage END---------------------------------------------------------- */\n\n/* ----------------------------------------------TypedLZW START---------------------------------------------------------- */\n\n/**\n * This class handles LZW encoding\n * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\n * @author Thibault Imbert (AS3 version - bytearray.org)\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\n * @author Anthony Powell (TypeScript version 2018)\n * @version 0.1 AS3 implementation\n */\n\nexport class LZWEncoder {\n\tprivate readonly EOF = 1;\n\n\t// GIFCOMPR.C - GIF Image compression routines\n\t// Lempel-Ziv compression based on 'compress'. GIF modifications by\n\t// David Rowley (mgardi@watdcsu.waterloo.edu)\n\t// General DEFINEs\n\n\tprivate readonly BITS = 12;\n\tprivate readonly HSIZE = 5003;\n\n\tprivate _imgW: number;\n\tprivate _imgH: number;\n\tprivate _pixels: number[];\n\tprivate _initCodeSize: number;\n\tprivate _remaining: number;\n\tprivate _curPixel: number;\n\n\t// GIF Image compression - modified 'compress'\n\t// Based on: compress.c - File compression ala IEEE Computer, June 1984.\n\t// By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n\t// Jim McKie (decvax!mcvax!jim)\n\t// Steve Davies (decvax!vax135!petsd!peora!srd)\n\t// Ken Turkowski (decvax!decwrl!turtlevax!ken)\n\t// James A. Woods (decvax!ihnp4!ames!jaw)\n\t// Joe Orost (decvax!vax135!petsd!joe)\n\n\tprivate _n_bits: number; // number of bits/code\n\tprivate _maxbits = this.BITS; // user settable max # bits/code\n\tprivate _maxcode: number; // maximum code, given n_bits\n\tprivate _maxmaxcode = 1 << this.BITS; // should NEVER generate this code\n\tprivate _htab: number[] = [];\n\tprivate _codetab: number[] = [];\n\tprivate _hsize = this.HSIZE; // for dynamic table sizing\n\tprivate _free_ent = 0; // first unused entry\n\n\t// block compression parameters -- after all codes are used up,\n\t// and compression rate changes, start over.\n\n\tprivate _clear_flg = false;\n\n\t// Algorithm: use open addressing double hashing (no chaining) on the\n\t// prefix code / next character combination. We do a variant of Knuth's\n\t// algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n\t// secondary probe. Here, the modular division first probe is gives way\n\t// to a faster exclusive-or manipulation. Also do block compression with\n\t// an adaptive reset, whereby the code table is cleared when the compression\n\t// ratio decreases, but after the table fills. The variable-length output\n\t// codes are re-sized at this point, and a special CLEAR code is generated\n\t// for the decompressor. Late addition: construct the table according to\n\t// file size for noticeable speed improvement on small files. Please direct\n\t// questions about this implementation to ames!jaw.\n\n\tprivate _g_init_bits: number;\n\tprivate _ClearCode: number;\n\tprivate _EOFCode: number;\n\n\t// output\n\t// Output the given code.\n\t// Inputs:\n\t// code: A n_bits-bit integer. If == -1, then EOF. This assumes\n\t// that n_bits =< wordsize - 1.\n\t// Outputs:\n\t// Outputs code to the file.\n\t// Assumptions:\n\t// Chars are 8 bits long.\n\t// Algorithm:\n\t// Maintain a BITS character long buffer (so that 8 codes will\n\t// fit in it exactly). Use the VAX insv instruction to insert each\n\t// code in turn. When the buffer fills up empty it and start over.\n\n\tprivate _cur_accum = 0;\n\tprivate _cur_bits = 0;\n\tprivate _masks = [\n\t\t0x0000,\n\t\t0x0001,\n\t\t0x0003,\n\t\t0x0007,\n\t\t0x000f,\n\t\t0x001f,\n\t\t0x003f,\n\t\t0x007f,\n\t\t0x00ff,\n\t\t0x01ff,\n\t\t0x03ff,\n\t\t0x07ff,\n\t\t0x0fff,\n\t\t0x1fff,\n\t\t0x3fff,\n\t\t0x7fff,\n\t\t0xffff,\n\t];\n\n\t// Number of characters so far in this 'packet'\n\tprivate _a_count: number;\n\n\t// Define the storage for the packet accumulator\n\tprivate _accum: number[] = [];\n\n\tconstructor(width: number, height: number, pixels: number[], colorDepth: number) {\n\t\tthis._imgW = width;\n\t\tthis._imgH = height;\n\t\tthis._pixels = pixels;\n\t\tthis._initCodeSize = Math.max(2, colorDepth);\n\t}\n\n\t// Add a character to the end of the current packet, and if it is 254\n\t// characters, flush the packet to disk.\n\tprivate writeCharToPacket(c: number, outs: EncodedImage): void {\n\t\tthis._accum[this._a_count++] = c;\n\t\tif (this._a_count >= 254) this.flush_char(outs);\n\t}\n\n\t// Clear out the hash table\n\t// table clear for block compress\n\n\tprivate cl_block(outs: EncodedImage): void {\n\t\tthis.cl_hash(this._hsize);\n\t\tthis._free_ent = this._ClearCode + 2;\n\t\tthis._clear_flg = true;\n\t\tthis.output(this._ClearCode, outs);\n\t}\n\n\t// reset code table\n\tprivate cl_hash(hsize: number): void {\n\t\tfor (let i = 0; i < hsize; ++i) this._htab[i] = -1;\n\t}\n\n\tprivate compress(init_bits: number, outs: EncodedImage) {\n\t\tlet fcode;\n\t\tlet i; /* = 0 */\n\t\tlet c;\n\t\tlet ent;\n\t\tlet disp;\n\t\tlet hsize_reg;\n\t\tlet hshift;\n\n\t\t// Set up the globals: g_init_bits - initial number of bits\n\t\tthis._g_init_bits = init_bits;\n\n\t\t// Set up the necessary values\n\t\tthis._clear_flg = false;\n\t\tthis._n_bits = this._g_init_bits;\n\t\tthis._maxcode = this.MAXCODE(this._n_bits);\n\n\t\tthis._ClearCode = 1 << (init_bits - 1);\n\t\tthis._EOFCode = this._ClearCode + 1;\n\t\tthis._free_ent = this._ClearCode + 2;\n\n\t\tthis._a_count = 0; // clear packet\n\n\t\tent = this.nextPixel();\n\n\t\thshift = 0;\n\t\tfor (fcode = this._hsize; fcode < 65536; fcode *= 2) ++hshift;\n\t\thshift = 8 - hshift; // set hash code range bound\n\n\t\thsize_reg = this._hsize;\n\t\tthis.cl_hash(hsize_reg); // clear hash table\n\n\t\tthis.output(this._ClearCode, outs);\n\n\t\touter_loop: while ((c = this.nextPixel()) != this.EOF) {\n\t\t\tfcode = (c << this._maxbits) + ent;\n\t\t\ti = (c << hshift) ^ ent; // xor hashing\n\n\t\t\tif (this._htab[i] == fcode) {\n\t\t\t\tent = this._codetab[i];\n\t\t\t\tcontinue;\n\t\t\t} else if (this._htab[i] >= 0) {\n\t\t\t\t// non-empty slot\n\n\t\t\t\tdisp = hsize_reg - i; // secondary hash (after G. Knott)\n\t\t\t\tif (i === 0) disp = 1;\n\n\t\t\t\tdo {\n\t\t\t\t\tif ((i -= disp) < 0) i += hsize_reg;\n\n\t\t\t\t\tif (this._htab[i] == fcode) {\n\t\t\t\t\t\tent = this._codetab[i];\n\t\t\t\t\t\tcontinue outer_loop;\n\t\t\t\t\t}\n\t\t\t\t} while (this._htab[i] >= 0);\n\t\t\t}\n\n\t\t\tthis.output(ent, outs);\n\t\t\tent = c;\n\t\t\tif (this._free_ent < this._maxmaxcode) {\n\t\t\t\tthis._codetab[i] = this._free_ent++; // code -> hashtable\n\t\t\t\tthis._htab[i] = fcode;\n\t\t\t} else this.cl_block(outs);\n\t\t}\n\n\t\t// Put out the final code.\n\t\tthis.output(ent, outs);\n\t\tthis.output(this._EOFCode, outs);\n\t}\n\n\t// ----------------------------------------------------------------------------\n\tpublic encode(os: EncodedImage) {\n\t\tos.write(this._initCodeSize); // write \"initial code size\" byte\n\t\tthis._remaining = this._imgW * this._imgH; // reset navigation variables\n\t\tthis._curPixel = 0;\n\t\tthis.compress(this._initCodeSize + 1, os); // compress and write the pixel data\n\t\tos.write(0); // write block terminator\n\t}\n\n\t// Flush the packet to disk, and reset the accumulator\n\tprivate flush_char(outs: EncodedImage) {\n\t\tif (this._a_count > 0) {\n\t\t\touts.write(this._a_count);\n\t\t\touts.writeArray(this._accum, this._a_count);\n\t\t\tthis._a_count = 0;\n\t\t}\n\t}\n\n\tprivate MAXCODE(n_bits: number) {\n\t\treturn (1 << n_bits) - 1;\n\t}\n\n\t// ----------------------------------------------------------------------------\n\t// Return the next pixel from the image\n\t// ----------------------------------------------------------------------------\n\n\tprivate nextPixel() {\n\t\tif (this._remaining === 0) return this.EOF;\n\t\t--this._remaining;\n\t\tlet pix = this._pixels[this._curPixel++];\n\t\treturn pix & 0xff;\n\t}\n\n\tprivate output(code: number, outs: EncodedImage) {\n\t\tthis._cur_accum &= this._masks[this._cur_bits];\n\n\t\tif (this._cur_bits > 0) this._cur_accum |= code << this._cur_bits;\n\t\telse this._cur_accum = code;\n\n\t\tthis._cur_bits += this._n_bits;\n\n\t\twhile (this._cur_bits >= 8) {\n\t\t\tthis.writeCharToPacket(this._cur_accum & 0xff, outs);\n\t\t\tthis._cur_accum >>= 8;\n\t\t\tthis._cur_bits -= 8;\n\t\t}\n\n\t\t// If the next entry is going to be too big for the code size,\n\t\t// then increase it, if possible.\n\n\t\tif (this._free_ent > this._maxcode || this._clear_flg) {\n\t\t\tif (this._clear_flg) {\n\t\t\t\tthis._maxcode = this.MAXCODE((this._n_bits = this._g_init_bits));\n\t\t\t\tthis._clear_flg = false;\n\t\t\t} else {\n\t\t\t\t++this._n_bits;\n\t\t\t\tif (this._n_bits == this._maxbits) this._maxcode = this._maxmaxcode;\n\t\t\t\telse this._maxcode = this.MAXCODE(this._n_bits);\n\t\t\t}\n\t\t}\n\n\t\tif (code == this._EOFCode) {\n\t\t\t// At EOF, write the rest of the buffer.\n\t\t\twhile (this._cur_bits > 0) {\n\t\t\t\tthis.writeCharToPacket(this._cur_accum & 0xff, outs);\n\t\t\t\tthis._cur_accum >>= 8;\n\t\t\t\tthis._cur_bits -= 8;\n\t\t\t}\n\n\t\t\tthis.flush_char(outs);\n\t\t}\n\t}\n}\n\n/* ----------------------------------------------TypedLZW END---------------------------------------------------------- */\n\n/* ----------------------------------------------GIFGen START---------------------------------------------------------- */\n\nexport class GIFGenerator {\n\tprivate stream: EncodedImage = new EncodedImage();\n\tprivate width: number;\n\tprivate height: number;\n\tprivate frameIndexedPixels: number[];\n\tprivate frameCount: number = 0;\n\tprivate GCT: string[];\n\n\tconstructor() {\n\t\tconsole.log(`Generator now running...`);\n\t}\n\n\tpublic init(width: number, height: number, GCT: string[]): void {\n\t\tthis.reset();\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.GCT = GCT;\n\t\tthis.writeHeader();\n\t\tthis.writeLogicalScreenDescriptor();\n\t\tthis.writeGlobalColorTable();\n\t\tthis.writeApplicationExtension();\n\t}\n\n\tpublic generateFrame(indexedPixels: number[]): void {\n\t\tthis.frameIndexedPixels = indexedPixels;\n\t\tthis.frameCount += 1;\n\t\tconsole.log(`generating frame ${this.frameCount}`);\n\t\tthis.writeGraphicControlExtension();\n\t\tthis.writeImageDescriptor();\n\t\tthis.writeImageData();\n\t}\n\n\tpublic getStream(): number[] {\n\t\tthis.writeTrailer();\n\t\treturn this.stream.get();\n\t}\n\n\tprivate writeHeader(): void {\n\t\tthis.stream.writeUTF('GIF89a'); /* GIF Header */\n\t}\n\n\tprivate writeLogicalScreenDescriptor(): void {\n\t\tthis.stream.writeLittleEndian(this.width); /* Canvas Width */\n\t\tthis.stream.writeLittleEndian(this.height); /* Canvas Height */\n\t\tthis.stream.write(0xf7); /* Packed Field */\n\t\tthis.stream.write(0); /* Background Color Index */\n\t\tthis.stream.write(0); /* Pixel Aspect Ration */\n\t}\n\n\tprivate writeGlobalColorTable(): void {\n\t\tlet count = 0;\n\n\t\tthis.GCT.forEach(color => {\n\t\t\tcount += 3;\n\t\t\tthis.stream.writeColor(color);\n\t\t});\n\n\t\tfor (let i = count; i < 3 * 256; i++) {\n\t\t\tthis.stream.write(0);\n\t\t}\n\t}\n\n\tprivate writeApplicationExtension(): void {\n\t\tthis.stream.write(0x21); /* extension introducer */\n\t\tthis.stream.write(0xff); /* app extension label */\n\t\tthis.stream.write(11); /* block size */\n\t\tthis.stream.writeUTF('NETSCAPE' + '2.0'); /* app id + auth code */\n\t\tthis.stream.write(3); /* sub-block size */\n\t\tthis.stream.write(1); /* loop sub-block id */\n\t\tthis.stream.writeLittleEndian(0); /* loop count (extra iterations, 0=repeat forever) */\n\t\tthis.stream.write(0); /* Block Terminator */\n\t}\n\n\tprivate writeGraphicControlExtension(): void {\n\t\tthis.stream.write(0x21); /* Extension Introducer */\n\t\tthis.stream.write(0xf9); /* Graphic Control Label */\n\t\tthis.stream.write(0x4); /* Byte Size */\n\t\tthis.stream.write(0x4); /* Packed Field */\n\t\tthis.stream.writeLittleEndian(0x9); /* Delay Time */\n\t\tthis.stream.write(0x0); /* Transparent Color Index */\n\t\tthis.stream.write(0x0); /* Block Terminator */\n\t}\n\n\tprivate writeImageDescriptor(): void {\n\t\tthis.stream.write(0x2c); /* Image Seperator Always 2C */\n\t\tthis.stream.writeLittleEndian(0x0); /* Image Left */\n\t\tthis.stream.writeLittleEndian(0x0); /* Image Top */\n\t\tthis.stream.writeLittleEndian(this.width); /* Image Width */\n\t\tthis.stream.writeLittleEndian(this.height); /* Image Height */\n\t\tthis.stream.write(0x0); /* Block Terminator */\n\t}\n\n\tprivate async writeImageData(): Promise<void> {\n\t\tconst encoder = new LZWEncoder(this.width, this.height, this.frameIndexedPixels, 8);\n\t\tencoder.encode(this.stream);\n\t\tconsole.log(`completed frame ${this.frameCount}`);\n\t}\n\n\tprivate writeTrailer(): void {\n\t\tthis.stream.write(0x3b); /* Trailer Marker */\n\t\tconsole.log(`Generator now finished.`);\n\t\tthis.frameCount = 0; /* Reset frame count for next GIF */\n\t}\n\n\tprivate writeLocalColorTable(): void {}\n\n\tprivate writePlainTextExtension(): void {}\n\n\tprivate writeCommentExtension(): void {}\n\n\tprivate reset() {\n\t\tthis.stream.reset();\n\t\tthis.frameCount = 0;\n\t}\n}\n\n/* ----------------------------------------------GIFGen END---------------------------------------------------------- */\n\n/* ----------------------------------------------Worker Processing Duties START---------------------------------------------------------- */\n\nconst ctx: Worker = self as any;\nlet _colorTableGen: ColorTableGenerator;\n\nconst gifGenerator: GIFGenerator = new GIFGenerator();\nconst _frameCollection: Uint8Array[] = [];\n\nfunction createColorTable(frame: Uint8Array, width: number, height: number): { [index: string]: number } {\n\t_colorTableGen = new ColorTableGenerator(frame);\n\tlet colorLookup: { [index: string]: number }, colorTable: string[];\n\t[colorLookup, colorTable] = _colorTableGen.generate();\n\twriteColorTable(colorTable, width, height);\n\treturn colorLookup;\n\n\tfunction writeColorTable(globalColorTable: string[], width: number, height: number): Promise<void> {\n\t\tgifGenerator.init(width, height, globalColorTable);\n\t\treturn;\n\t}\n}\n\nfunction processFrames(\n\tframes: Uint8Array[],\n\twidth: number,\n\theight: number\n): {\n\tnumericalRGBFrames: Uint8Array[];\n\tstringRGBFrames: string[][];\n} {\n\tfunction process(): {\n\t\tnumericalRGBFrames: Uint8Array[];\n\t\tstringRGBFrames: string[][];\n\t} {\n\t\tconst numericalRGBFrames: Uint8Array[] = [];\n\t\tconst stringRGBFrames: string[][] = [];\n\t\tframes.forEach(frame => {\n\t\t\tconst { numericalRGBData, stringRGBData } = toRGB(frame);\n\t\t\tnumericalRGBFrames.push(numericalRGBData);\n\t\t\tstringRGBFrames.push(stringRGBData);\n\t\t});\n\t\treturn { numericalRGBFrames, stringRGBFrames };\n\t}\n\tfunction toRGB(frame: Uint8Array): { numericalRGBData: Uint8Array; stringRGBData: string[] } {\n\t\tconst numericalRGBData = frame.filter((pixel: number, index: number) => (index + 1) % 4 !== 0);\n\n\t\tconst stringRGBData: string[] = [];\n\t\tlet pixel = '';\n\t\tnumericalRGBData.forEach((color, index) => {\n\t\t\tpixel += pad(color);\n\t\t\tif ((index + 1) % 3 === 0) {\n\t\t\t\tstringRGBData.push(pixel);\n\t\t\t\tpixel = '';\n\t\t\t}\n\t\t});\n\t\treturn { numericalRGBData, stringRGBData };\n\t}\n\n\tfunction pad(color: number): string {\n\t\tif (color < 16) {\n\t\t\treturn `0${color.toString(16)}`;\n\t\t} else {\n\t\t\treturn color.toString(16);\n\t\t}\n\t}\n\treturn process();\n}\n\nfunction generateGIF(frames: string[][], colorLookup: { [index: string]: number }) {\n\tfunction mapPixelsToIndex(frames: string[][], colorLookup: { [index: string]: number }): number[][] {\n\t\tconst indexedFrames: number[][] = [];\n\t\tframes.forEach((frame, index) => {\n\t\t\tconst indexedPixels: number[] = [];\n\t\t\tframe.forEach(pixel => {\n\t\t\t\tindexedPixels.push(lookup(pixel));\n\t\t\t});\n\t\t\tindexedFrames.push(indexedPixels);\n\t\t});\n\t\treturn indexedFrames;\n\t}\n\n\tfunction lookup(pixel: string) {\n\t\treturn /* colorLookup[pixel] ? colorLookup[pixel] : */ _colorTableGen.lookupRGB(pixel);\n\t}\n\tconst indexedFrames = mapPixelsToIndex(frames, colorLookup);\n\n\tindexedFrames.forEach(frame => {\n\t\tgifGenerator.generateFrame(frame);\n\t});\n\treturn gifGenerator.getStream();\n}\n\nfunction collectFrames(frame: ArrayBuffer) {\n\t_frameCollection.push(new Uint8Array(frame));\n}\n\nfunction getColorSamplingFrames(frames: Uint8Array[]) {\n\t/* every 5 frames placed in sampling frames array */\n\tconst samplingFrames = frames.filter((frame, index) => (index + 1) % 5 === 0);\n\t/* Combine arrays in samplingFrames into one Uint8Array */\n\treturn samplingFrames.reduce((accFrame: Uint8Array, frame) => {\n\t\tconst sampling = new Uint8Array(accFrame.length + frame.length);\n\t\tsampling.set(accFrame);\n\t\tsampling.set(frame, accFrame.length);\n\n\t\treturn sampling;\n\t}, new Uint8Array([]));\n}\n\n/* ----------------------------------------------Worker Processing Duties END---------------------------------------------------------- */\n\n/* ----------------------------------------------Worker Router START---------------------------------------------------------- */\n\nonmessage = ({ data: { job, params } }) => {\n\tswitch (job) {\n\t\tcase 'createGIF':\n\t\t\tconst { width, height } = params;\n\t\t\tconst { numericalRGBFrames, stringRGBFrames } = processFrames(_frameCollection, width, height);\n\t\t\tconst samplingFrame = getColorSamplingFrames(numericalRGBFrames);\n\t\t\tconst colorLookup: { [index: string]: number } = createColorTable(samplingFrame, width, height);\n\t\t\tconst gifData = generateGIF(stringRGBFrames, colorLookup);\n\t\t\tctx.postMessage(gifData);\n\t\t\tbreak;\n\t\tcase 'collectFrames':\n\t\t\tconst { frame }: { frame: ArrayBuffer } = params;\n\t\t\tcollectFrames(frame);\n\t\t\tbreak;\n\t}\n};\n\n/* ----------------------------------------------Worker Router END---------------------------------------------------------- */\n"]}